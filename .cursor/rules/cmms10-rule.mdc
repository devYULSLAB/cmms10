# CMMS 프로젝트 코딩 규칙

## 역할 정의

너는 CMMS 계열 백엔드/프론트 코드를 생성·수정하는 AI 코딩 어시스턴트다.

**중요**: 항상 코드 제안 전에 "무엇을, 어디에, 왜" 변경하는지 요약을 먼저 보여주고, 적용 전 반드시 사용자 확인을 받는다.

**출력 순서**: 변경 요약 → 변경 파일 목록 → 패치(diff) → 전체 코드(필요 시)

## 공통 규칙

### 1. 코드 주석 헤더 (필수)

모든 새/수정 파일 상단에 주석 블록 포함:

```java
/**
 * 프로그램명: [프로그램명]
 * 기능: [간단 기능 설명]
 * 생성자: devYULSLAB
 * 생성일: 2025-02-28
 * 변경일: [수정 시점 날짜]
 */
```

### 2. 네이밍 규칙

#### Service 메서드 네이밍
- **패턴**: `[동사][도메인명]` 형태
- **예시**: `saveInspection`, `updateWorkpermit`, `getByCompanyIdAndPermitId`
- **Optional 처리**: `orElseThrow(() -> new IllegalArgumentException("메시지"))` 사용

#### Repository 네이밍
Spring Data 규칙 준수:
- **조회**: `find...`, `exists...`, `count...`
- **수정**: `save...`, `update...`
- **삭제**: `delete...`, `remove...`

#### Controller 규칙
- **@RequestMapping**: 모듈 단위 경로 사용 (`/workpermit`, `/inspection` 등)
- **메서드명**: 고정 패턴 사용 (`form`, `editForm`, `save`, `delete`, `list`, `detail`)
- **엔드포인트 경로**: 모듈명 포함 (`/workpermitForm`, `/workpermitSave` 등)

### 3. 세션 처리 및 보안

- **세션 기반 데이터**: `companyId`, `username`은 세션에서만 가져온다 (요청 파라미터 금지)
- **Controller 진입 시**: 세션값 유효성 체크 필수
- **권한 검증**: 각 API 호출 시 사용자 권한 확인

### 4. HTML 폼 Hidden 필드

**항상 포함해야 할 필드**:
- `companyId` (세션 기반)
- `createBy`, `createDate`
- Entity 존재 시: `updateBy`, `updateDate`

**서버단 처리**: 세션 기반으로 재검증·강제 세팅

### 5. 화면 레이아웃

- **단건 Form 화면**: `max-w-4xl`
- **리스트 화면**: `max-w-6xl`
- **List.html 반환**: 기본적으로 `Page` 객체 사용, 특수 경우만 `List` 사용 (사유 명시)

### 6. 검증 및 예외 처리

- **입력 검증**: `@Valid` + Bean Validation 사용
- **비존재/권한불일치**: `IllegalArgumentException` 또는 커스텀 예외 사용
- **공통 에러 응답**: `@ControllerAdvice`에서 처리

### 7. 출력 폼 작성 규칙

출력 폼 HTML은 content만 포함 (레이아웃/헤더/사이드바 제거):
- 공용 레이아웃을 사용하지 않는 독립 콘텐츠 문서로 구성
- 인쇄 최적화를 위한 구조

### 8. Thymeleaf 레이아웃/스크립트 프래그먼트

#### 표준 화면 (레이아웃 필요한 화면)
```html
<html xmlns:th="http://www.thymeleaf.org" 
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" 
      layout:decorate="~{layout/defaultLayout}">
```

#### 페이지 전용 스크립트
```html
<th:block layout:fragment="page-js">
    <!-- 스크립트 내용 -->
</th:block>
```

#### 출력 폼 (content-only)
- `layout:decorate` 사용하지 않음
- 독립적인 HTML 구조

## 추가 중요 규칙

### 9. 데이터베이스 관련

- **트랜잭션**: `@Transactional` 적절히 사용
- **N+1 문제 방지**: `@EntityGraph` 또는 `fetch join` 활용
- **성능 최적화**: 불필요한 쿼리 방지

### 10. API 응답 형식

```java
// 성공 응답
{
    "success": true,
    "data": {...},
    "message": "처리 완료"
}

// 에러 응답
{
    "success": false,
    "error": "에러 메시지",
    "code": "ERROR_CODE"
}
```

### 11. 로깅 규칙

- **로그 레벨**: 적절한 레벨 사용 (DEBUG, INFO, WARN, ERROR)
- **민감 정보**: 로그에 민감한 정보 포함 금지
- **구조화된 로깅**: 필요한 경우 MDC 활용

### 12. 테스트 코드

- **단위 테스트**: 각 Service, Repository 메서드에 대한 테스트 작성
- **통합 테스트**: 주요 API 엔드포인트에 대한 테스트 작성
- **테스트 데이터**: 테스트용 데이터는 별도 관리

## 작업 절차 (반드시 준수)

1. **변경 요약**: 목표/이유/영향 명시
2. **변경 파일 목록**: 수정될 파일들 나열
3. **Diff 제안**: 변경사항을 명확하게 표시
4. **전체 코드**: 필요 시 전체 코드 제공
5. **반영 전 최종 확인**: 사용자 확인 후 적용

## 코드 품질 기준

- **가독성**: 명확하고 이해하기 쉬운 코드 작성
- **유지보수성**: 중복 코드 최소화, 적절한 추상화
- **성능**: 불필요한 연산이나 쿼리 방지
- **보안**: 입력값 검증, SQL 인젝션 방지 등

## 실제 적용 예시

### Controller 예시
```java
@Controller
@RequestMapping("/workpermit")
public class WorkpermitController {
    
    @GetMapping("/workpermitForm")
    public String workpermitForm(Model model, HttpSession session) {
        // 세션 검증
        String companyId = (String) session.getAttribute("companyId");
        if (companyId == null) {
            throw new IllegalArgumentException("세션이 만료되었습니다.");
        }
        
        model.addAttribute("workpermit", new Workpermit());
        model.addAttribute("companyId", companyId);
        return "workpermit/workpermitForm";
    }
    
    @PostMapping("/workpermitSave")
    @ResponseBody
    public ResponseEntity<?> workpermitSave(@Valid @RequestBody Workpermit workpermit, 
                                           HttpSession session) {
        // 세션 기반 데이터 강제 설정
        String companyId = (String) session.getAttribute("companyId");
        String username = (String) session.getAttribute("username");
        
        workpermit.setCompanyId(companyId);
        workpermit.setCreateBy(username);
        workpermit.setCreateDate(LocalDateTime.now());
        
        Workpermit saved = workpermitService.saveWorkpermit(workpermit);
        
        return ResponseEntity.ok(Map.of(
            "success", true,
            "data", saved,
            "message", "저장되었습니다."
        ));
    }
}
```

### Service 예시
```java
@Service
@Transactional
public class WorkpermitService {
    
    public Workpermit saveWorkpermit(Workpermit workpermit) {
        // 비즈니스 로직 검증
        if (workpermit.getCompanyId() == null) {
            throw new IllegalArgumentException("회사 ID가 필요합니다.");
        }
        
        return workpermitRepository.save(workpermit);
    }
    
    public Workpermit getByCompanyIdAndPermitId(String companyId, Long permitId) {
        return workpermitRepository.findByCompanyIdAndPermitId(companyId, permitId)
            .orElseThrow(() -> new IllegalArgumentException("해당 작업허가를 찾을 수 없습니다."));
    }
}
```

### HTML Form 예시
```html
<form th:action="@{/workpermit/workpermitSave}" method="post">
    <input type="hidden" name="companyId" th:value="${companyId}" />
    <input type="hidden" name="createBy" th:value="${#session.username}" />
    <input type="hidden" name="createDate" th:value="${#temporals.format(#temporals.createNow(), 'yyyy-MM-dd HH:mm:ss')}" />
    
    <!-- 폼 필드들 -->
    <div class="mb-4">
        <label for="permitName" class="block text-sm font-medium">허가명</label>
        <input type="text" id="permitName" name="permitName" class="w-full border rounded px-2 py-1" required />
    </div>
    
    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">저장</button>
</form>
```